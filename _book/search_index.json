[["index.html", "Everyday-R Chapter 1 Introduction 1.1 R syntax in this book 1.2 Code availability", " Everyday-R Brian Jungmin Park Chapter 1 Introduction This book serves as a collection of R Markdown files that aims to assist users in learning the practical syntax and usage of R. Mainly, code snippets and workflow aimed at tackling everyday tasks in data science will be covered, including data cleaning, data wrangling, iterations, machine learning with caret, data visualization, and web app design using Shiny. Each broad topic will be split into chapters, though there will be some overlap. 1.1 R syntax in this book Code chunks will be presented in a typical Markdown format as such, with the code output below: runif(n = 20, min = 0, max = 100) ## [1] 68.362029 17.797913 95.965501 4.746446 19.746387 84.629781 77.830141 62.800496 ## [9] 31.745744 33.001576 56.940575 75.264391 69.890260 39.600558 51.621860 40.426663 ## [17] 91.715630 20.190015 34.909291 28.976452 When using commands outside of base R, the loading of the parent package will be explicitly shown to avoid confusion: library(microbenchmark) microbenchmark::microbenchmark(runif(n = 20, min = 0, max = 100)) ## Unit: microseconds ## expr min lq mean median uq max neval ## runif(n = 20, min = 0, max = 100) 1.418 1.542 1.70813 1.584 1.6885 7.834 100 Typically in longer chains of code, I will use %&gt;% from magrittr as a pipe. This is usually standard practice in code using packages from the tidyverse so it’s a good habit to start using it. Finally, here is the R version I am currently using: version ## _ ## platform x86_64-apple-darwin17.0 ## arch x86_64 ## os darwin17.0 ## system x86_64, darwin17.0 ## status ## major 4 ## minor 0.5 ## year 2021 ## month 03 ## day 31 ## svn rev 80133 ## language R ## version.string R version 4.0.5 (2021-03-31) ## nickname Shake and Throw 1.2 Code availability All code used to compile this book as well as the individual .Rmd files are available on my repository here "],["everyday-data-wrangling.html", "Chapter 2 Everyday data wrangling 2.1 Renaming column headers 2.2 Grouped operations 2.3 Data transformation 2.4 Joining and separating character columns 2.5 Filtering rows 2.6 Subsetting columns based on strings 2.7 Long and wide data formats 2.8 Trimming strings 2.9 Iterating over list of dataframes 2.10 Rowwise operations 2.11 Conditional transformation 2.12 Missing values 2.13 Joining dataframes", " Chapter 2 Everyday data wrangling Suppose there exists a test dataset and the user is tasked with proving their proficiency in exploratory data analysis (EDA). However, prior to EDA the user must be able to transform the original data into a desirable format. This includes, but not limited to, missing data imputation, scalar transformation, feature selection, group aggregation, and data filtering. The following notebook outlines the fundamentals of data wrangling, using base R and tidyverse solutions interchangeably. 2.1 Renaming column headers Suppose a 32 x 11 dataset mtcars where rownames correspond to the car model. data(mtcars) mtcars &lt;- mtcars %&gt;% as_tibble(rownames = &#39;CAR&#39;) Renaming column headers: mtcars %&gt;% rename_with(toupper) ## # A tibble: 32 x 12 ## CAR MPG CYL DISP HP DRAT WT QSEC VS AM GEAR CARB ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows mtcars %&gt;% rename_with(function(x) paste0(x, &quot;_1&quot;), .cols = -1) ## # A tibble: 32 x 12 ## CAR mpg_1 cyl_1 disp_1 hp_1 drat_1 wt_1 qsec_1 vs_1 am_1 gear_1 carb_1 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows Alternatively with base R: names(mtcars)[-1] &lt;- paste0(names(mtcars[-1]), &#39;_1&#39;) 2.2 Grouped operations mtcars %&gt;% group_by(cyl) %&gt;% summarise(avg_mpg = mean(mpg)) ## # A tibble: 3 x 2 ## cyl avg_mpg ## &lt;dbl&gt; &lt;dbl&gt; ## 1 4 26.7 ## 2 6 19.7 ## 3 8 15.1 Multiple columns: mtcars %&gt;% group_by(cyl) %&gt;% summarise(across(c(mpg, disp, hp), mean, .names = &quot;mean_{col}&quot;)) ## # A tibble: 3 x 4 ## cyl mean_mpg mean_disp mean_hp ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 26.7 105. 82.6 ## 2 6 19.7 183. 122. ## 3 8 15.1 353. 209. mtcars %&gt;% group_by(cyl) %&gt;% summarise(across(where(is.numeric), mean, .names = &quot;mean_{col}&quot;)) ## # A tibble: 3 x 11 ## cyl mean_mpg mean_disp mean_hp mean_drat mean_wt mean_qsec mean_vs mean_am mean_gear ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 26.7 105. 82.6 4.07 2.29 19.1 0.909 0.727 4.09 ## 2 6 19.7 183. 122. 3.59 3.12 18.0 0.571 0.429 3.86 ## 3 8 15.1 353. 209. 3.23 4.00 16.8 0 0.143 3.29 ## # … with 1 more variable: mean_carb &lt;dbl&gt; Alternatively, in base R: aggregate(mpg ~ cyl, data = mtcars, FUN = mean) ## cyl mpg ## 1 4 26.66364 ## 2 6 19.74286 ## 3 8 15.10000 2.3 Data transformation Scalar transformation of numeric columns: mtcars %&gt;% mutate(mpg = mpg*2) ## # A tibble: 32 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 42 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 42 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 45.6 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 42.8 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 37.4 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 36.2 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 28.6 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 48.8 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 45.6 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 38.4 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows Conditional transformation and keep the old columns: mtcars %&gt;% mutate(across(where(is.numeric), function(x) x*2, .names = &quot;double_{col}&quot;)) ## # A tibble: 32 x 23 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb double_mpg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 42 ## 2 Mazda RX4 W… 21 6 160 110 3.9 2.88 17.0 0 1 4 4 42 ## 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 45.6 ## 4 Hornet 4 Dr… 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 42.8 ## 5 Hornet Spor… 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 37.4 ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 36.2 ## 7 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 28.6 ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 48.8 ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 45.6 ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 38.4 ## # … with 22 more rows, and 10 more variables: double_cyl &lt;dbl&gt;, double_disp &lt;dbl&gt;, ## # double_hp &lt;dbl&gt;, double_drat &lt;dbl&gt;, double_wt &lt;dbl&gt;, double_qsec &lt;dbl&gt;, ## # double_vs &lt;dbl&gt;, double_am &lt;dbl&gt;, double_gear &lt;dbl&gt;, double_carb &lt;dbl&gt; Mutate multiple columns and replace old columns: mtcars %&gt;% mutate(across(c(mpg, disp), function(x) x*3)) ## # A tibble: 32 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 63 6 480 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 63 6 480 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 68.4 4 324 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 64.2 6 774 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 56.1 8 1080 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 54.3 6 675 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 42.9 8 1080 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 73.2 4 440. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 68.4 4 422. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 57.6 6 503. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows Iterating across the columns using purrr::modify instead: mtcars %&gt;% modify_if(is.numeric, ~ .x*3) ## # A tibble: 32 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 63 18 480 330 11.7 7.86 49.4 0 3 12 12 ## 2 Mazda RX4 Wag 63 18 480 330 11.7 8.62 51.1 0 3 12 12 ## 3 Datsun 710 68.4 12 324 279 11.6 6.96 55.8 3 3 12 3 ## 4 Hornet 4 Drive 64.2 18 774 330 9.24 9.64 58.3 3 0 9 3 ## 5 Hornet Sportabout 56.1 24 1080 525 9.45 10.3 51.1 0 0 9 6 ## 6 Valiant 54.3 18 675 315 8.28 10.4 60.7 3 0 9 3 ## 7 Duster 360 42.9 24 1080 735 9.63 10.7 47.5 0 0 9 12 ## 8 Merc 240D 73.2 12 440. 186 11.1 9.57 60 3 0 12 6 ## 9 Merc 230 68.4 12 422. 285 11.8 9.45 68.7 3 0 12 6 ## 10 Merc 280 57.6 18 503. 369 11.8 10.3 54.9 3 0 12 12 ## # … with 22 more rows 2.4 Joining and separating character columns For the CAR column comprised of strings, separate the individual strings into multiple columns: mtcars %&gt;% separate(CAR, c(&#39;Brand&#39;, &#39;Model&#39;), sep = &quot; &quot;, extra = &#39;merge&#39;) ## # A tibble: 32 x 13 ## Brand Model mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant &lt;NA&gt; 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows Sumamry based on the car brand using the %&gt;% pipe between tidyverse verbs: mtcars %&gt;% separate(CAR, c(&#39;Brand&#39;, &#39;Model&#39;), sep = &quot; &quot;, extra = &#39;merge&#39;) %&gt;% group_by(Brand) %&gt;% summarise(count = n(), mean_mpg = mean(mpg)) %&gt;% arrange(desc(count)) ## # A tibble: 22 x 3 ## Brand count mean_mpg ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Merc 7 19.0 ## 2 Fiat 2 29.8 ## 3 Hornet 2 20.0 ## 4 Mazda 2 21 ## 5 Toyota 2 27.7 ## 6 AMC 1 15.2 ## 7 Cadillac 1 10.4 ## 8 Camaro 1 13.3 ## 9 Chrysler 1 14.7 ## 10 Datsun 1 22.8 ## # … with 12 more rows Separation of columns by strings, using base R instead: mtcars$Brand &lt;- unlist( lapply(strsplit(mtcars$CAR, split = &#39; &#39;), function(x) x[1]) ) mtcars$Model &lt;- unlist( lapply(strsplit(mtcars$CAR, split = &#39; &#39;), function(x) x[2]) ) Combining columns into a new column: data(iris) iris &lt;- as_tibble(iris) iris %&gt;% unite(&#39;Petal.Dimensions&#39;, c(`Petal.Length`, `Petal.Width`), sep = &quot; x &quot;, remove = FALSE) ## # A tibble: 150 x 6 ## Sepal.Length Sepal.Width Petal.Dimensions Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 x 0.2 1.4 0.2 setosa ## 2 4.9 3 1.4 x 0.2 1.4 0.2 setosa ## 3 4.7 3.2 1.3 x 0.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 x 0.2 1.5 0.2 setosa ## 5 5 3.6 1.4 x 0.2 1.4 0.2 setosa ## 6 5.4 3.9 1.7 x 0.4 1.7 0.4 setosa ## 7 4.6 3.4 1.4 x 0.3 1.4 0.3 setosa ## 8 5 3.4 1.5 x 0.2 1.5 0.2 setosa ## 9 4.4 2.9 1.4 x 0.2 1.4 0.2 setosa ## 10 4.9 3.1 1.5 x 0.1 1.5 0.1 setosa ## # … with 140 more rows In base R: iris$Petal.Dimensions &lt;- paste(iris$Petal.Length, iris$Petal.Width, sep = &quot; x &quot;) 2.5 Filtering rows Filtering rows based on strings: mtcars %&gt;% filter(str_detect(CAR, &#39;Mazda&#39;)) ## # A tibble: 2 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 mtcars %&gt;% filter(str_detect(CAR, c(&#39;Mazda&#39;, &#39;Merc&#39;))) ## # A tibble: 5 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 3 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## 4 Merc 450SE 16.4 8 276. 180 3.07 4.07 17.4 0 0 3 3 ## 5 Merc 450SLC 15.2 8 276. 180 3.07 3.78 18 0 0 3 3 Alternatively, using base R: mtcars[grepl(&#39;Mazda&#39;, mtcars$CAR),] mtcars[grepl(&#39;Mazda|Merc&#39;, mtcars$CAR),] Filtering rows based on a numeric column: mtcars %&gt;% filter(between(mpg, 18, 20)) ## # A tibble: 5 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 2 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 3 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## 4 Pontiac Firebird 19.2 8 400 175 3.08 3.84 17.0 0 0 3 2 ## 5 Ferrari Dino 19.7 6 145 175 3.62 2.77 15.5 0 1 5 6 mtcars %&gt;% filter(cyl %in% c(6, 8)) ## # A tibble: 21 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 4 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 5 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 6 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 7 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## 8 Merc 280C 17.8 6 168. 123 3.92 3.44 18.9 1 0 4 4 ## 9 Merc 450SE 16.4 8 276. 180 3.07 4.07 17.4 0 0 3 3 ## 10 Merc 450SL 17.3 8 276. 180 3.07 3.73 17.6 0 0 3 3 ## # … with 11 more rows Alternatively, in base R: mtcars[which(mtcars$mpg &gt; 18 &amp; mtcars$mpg &lt; 20),] mtcars[which(mtcars$cyl %in% c(6,8)),] 2.6 Subsetting columns based on strings Selecting columns based on column name matching: mtcars %&gt;% select(contains(&#39;m&#39;)) ## # A tibble: 32 x 2 ## mpg am ## &lt;dbl&gt; &lt;dbl&gt; ## 1 21 1 ## 2 21 1 ## 3 22.8 1 ## 4 21.4 0 ## 5 18.7 0 ## 6 18.1 0 ## 7 14.3 0 ## 8 24.4 0 ## 9 22.8 0 ## 10 19.2 0 ## # … with 22 more rows mtcars %&gt;% select(starts_with(&#39;m&#39;)) ## # A tibble: 32 x 1 ## mpg ## &lt;dbl&gt; ## 1 21 ## 2 21 ## 3 22.8 ## 4 21.4 ## 5 18.7 ## 6 18.1 ## 7 14.3 ## 8 24.4 ## 9 22.8 ## 10 19.2 ## # … with 22 more rows Or using regex expressions: mtcars %&gt;% select(matches(&#39;^m&#39;)) ## # A tibble: 32 x 1 ## mpg ## &lt;dbl&gt; ## 1 21 ## 2 21 ## 3 22.8 ## 4 21.4 ## 5 18.7 ## 6 18.1 ## 7 14.3 ## 8 24.4 ## 9 22.8 ## 10 19.2 ## # … with 22 more rows Alternatively, in base R: mtcars[,grepl(&#39;m&#39;, names(mtcars))] mtcars[,grepl(&#39;^m&#39;, names(mtcars))] 2.7 Long and wide data formats Transforming datasets into long/wide formats: mtcars_long &lt;- mtcars %&gt;% pivot_longer(-1, names_to = &#39;Metric&#39;, values_to = &#39;Values&#39;) mtcars_long ## # A tibble: 352 x 3 ## CAR Metric Values ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Mazda RX4 mpg 21 ## 2 Mazda RX4 cyl 6 ## 3 Mazda RX4 disp 160 ## 4 Mazda RX4 hp 110 ## 5 Mazda RX4 drat 3.9 ## 6 Mazda RX4 wt 2.62 ## 7 Mazda RX4 qsec 16.5 ## 8 Mazda RX4 vs 0 ## 9 Mazda RX4 am 1 ## 10 Mazda RX4 gear 4 ## # … with 342 more rows mtcars_wide &lt;- mtcars_long %&gt;% pivot_wider(names_from = &#39;Metric&#39;, values_from = &#39;Values&#39;) mtcars_wide ## # A tibble: 32 x 12 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4 Drive 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows 2.8 Trimming strings Trimming character columns, then re-encoding them as factors: iris %&gt;% mutate(Species = strtrim(Species, 3)) %&gt;% mutate(Species = factor(Species, levels = c(&#39;set&#39;, &#39;ver&#39;, &#39;vir&#39;))) ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 set ## 2 4.9 3 1.4 0.2 set ## 3 4.7 3.2 1.3 0.2 set ## 4 4.6 3.1 1.5 0.2 set ## 5 5 3.6 1.4 0.2 set ## 6 5.4 3.9 1.7 0.4 set ## 7 4.6 3.4 1.4 0.3 set ## 8 5 3.4 1.5 0.2 set ## 9 4.4 2.9 1.4 0.2 set ## 10 4.9 3.1 1.5 0.1 set ## # … with 140 more rows 2.9 Iterating over list of dataframes Forming a list of dataframes by column value: mtcars_lst &lt;- mtcars %&gt;% group_split(cyl) Looping over each element of the list and renaming columns: mtcars_lst &lt;- lapply(mtcars_lst, function(x) rename_with(x, function(y) paste0(y, &quot;_&quot;, as.character(unique(x$cyl))), .cols = -1)) mtcars_lst[[1]] ## # A tibble: 11 x 12 ## CAR mpg_4 cyl_4 disp_4 hp_4 drat_4 wt_4 qsec_4 vs_4 am_4 gear_4 carb_4 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 2 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 3 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 4 Fiat 128 32.4 4 78.7 66 4.08 2.2 19.5 1 1 4 1 ## 5 Honda Civic 30.4 4 75.7 52 4.93 1.62 18.5 1 1 4 2 ## 6 Toyota Corolla 33.9 4 71.1 65 4.22 1.84 19.9 1 1 4 1 ## 7 Toyota Corona 21.5 4 120. 97 3.7 2.46 20.0 1 0 3 1 ## 8 Fiat X1-9 27.3 4 79 66 4.08 1.94 18.9 1 1 4 1 ## 9 Porsche 914-2 26 4 120. 91 4.43 2.14 16.7 0 1 5 2 ## 10 Lotus Europa 30.4 4 95.1 113 3.77 1.51 16.9 1 1 5 2 ## 11 Volvo 142E 21.4 4 121 109 4.11 2.78 18.6 1 1 4 2 Using purrr::map instead: mtcars_lst &lt;- mtcars %&gt;% group_split(cyl) mtcars_lst &lt;- mtcars_lst %&gt;% map(~ rename_with(.x, function(y) paste0(y, &quot;_&quot;, as.character(unique(.x$cyl))), .cols = -1)) mtcars_lst[[1]] ## # A tibble: 11 x 12 ## CAR mpg_4 cyl_4 disp_4 hp_4 drat_4 wt_4 qsec_4 vs_4 am_4 gear_4 carb_4 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 2 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 3 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 4 Fiat 128 32.4 4 78.7 66 4.08 2.2 19.5 1 1 4 1 ## 5 Honda Civic 30.4 4 75.7 52 4.93 1.62 18.5 1 1 4 2 ## 6 Toyota Corolla 33.9 4 71.1 65 4.22 1.84 19.9 1 1 4 1 ## 7 Toyota Corona 21.5 4 120. 97 3.7 2.46 20.0 1 0 3 1 ## 8 Fiat X1-9 27.3 4 79 66 4.08 1.94 18.9 1 1 4 1 ## 9 Porsche 914-2 26 4 120. 91 4.43 2.14 16.7 0 1 5 2 ## 10 Lotus Europa 30.4 4 95.1 113 3.77 1.51 16.9 1 1 5 2 ## 11 Volvo 142E 21.4 4 121 109 4.11 2.78 18.6 1 1 4 2 Fitting a linear model for each element of the list, iteratively: mtcars_lst &lt;- mtcars %&gt;% group_split(cyl) mtcars_lst %&gt;% map(~ lm(mpg ~ gear, data = .x)) %&gt;% map(coef) ## [[1]] ## (Intercept) gear ## 15.08125 2.83125 ## ## [[2]] ## (Intercept) gear ## 19.82 -0.02 ## ## [[3]] ## (Intercept) gear ## 14.525 0.175 Using broom to clean up modelling result: library(broom) mtcars_lst %&gt;% map(~ lm(mpg ~ gear, data = .x)) %&gt;% map(tidy) %&gt;% bind_rows() ## # A tibble: 6 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 15.1 10.8 1.39 0.197 ## 2 gear 2.83 2.62 1.08 0.308 ## 3 (Intercept) 19.8 3.68 5.38 0.00299 ## 4 gear -0.0200 0.942 -0.0212 0.984 ## 5 (Intercept) 14.5 3.41 4.25 0.00112 ## 6 gear 0.175 1.02 0.172 0.866 Using base R and the apply family instead: models &lt;- lapply(mtcars_lst, function(x) lm(mpg ~ gear, data = x)) coefs &lt;- lapply(models, coef) coefs[[1]] ## (Intercept) gear ## 15.08125 2.83125 2.10 Rowwise operations Rowwise operations with mutate df &lt;- tibble(name = c(&#39;Brian&#39;, &#39;Connor&#39;), coffee = sample(1:10, 2), wine = sample(1:5, 2), juice = sample(1:5, 2)) df ## # A tibble: 2 x 4 ## name coffee wine juice ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Brian 4 3 3 ## 2 Connor 8 1 5 df %&gt;% rowwise() %&gt;% mutate(total = sum(c_across(coffee:juice)), avg = mean(c_across(coffee:juice))) ## # A tibble: 2 x 6 ## # Rowwise: ## name coffee wine juice total avg ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Brian 4 3 3 10 3.33 ## 2 Connor 8 1 5 14 4.67 df %&gt;% rowwise() %&gt;% mutate(total = sum(c_across(coffee:juice))) %&gt;% ungroup() %&gt;% mutate(across(coffee:juice, function(x) x/total, .names = &quot;{col}_prop.&quot;)) ## # A tibble: 2 x 8 ## name coffee wine juice total coffee_prop. wine_prop. juice_prop. ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Brian 4 3 3 10 0.4 0.3 0.3 ## 2 Connor 8 1 5 14 0.571 0.0714 0.357 2.11 Conditional transformation Conditional mutate using case_when: mtcars %&gt;% mutate(mileage_class = case_when(mpg &gt; 20 ~ &#39;High&#39;, mpg &lt; 20 ~ &#39;Low&#39;)) %&gt;% relocate(mileage_class, .after = mpg) ## # A tibble: 32 x 13 ## CAR mpg mileage_class cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 High 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX… 21 High 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 7… 22.8 High 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4… 21.4 High 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet S… 18.7 Low 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 18.1 Low 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 3… 14.3 Low 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 High 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 High 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 Low 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows Conditional mutate using base R: mtcars$mileage_class &lt;- ifelse( mtcars$mpg &gt; 20, &#39;High&#39;, &#39;Low&#39; ) subset(mtcars, select = c(CAR, mpg, mileage_class, cyl:carb)) ## # A tibble: 32 x 13 ## CAR mpg mileage_class cyl disp hp drat wt qsec vs am gear carb ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mazda RX4 21 High 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 Mazda RX… 21 High 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 Datsun 7… 22.8 High 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 Hornet 4… 21.4 High 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 Hornet S… 18.7 Low 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 Valiant 18.1 Low 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 Duster 3… 14.3 Low 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 Merc 240D 24.4 High 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 Merc 230 22.8 High 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 Merc 280 19.2 Low 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows 2.12 Missing values Handling missing values: First, insert NAs randomly for the sake of this exercise: mtcars_NA &lt;- map_df(mtcars, function(x) {x[sample(c(TRUE, NA), prob = c(0.95, 0.01), size = length(x), replace = TRUE)]}) mtcars_NA ## # A tibble: 32 x 13 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb mileage_class ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 High ## 2 Mazda RX… 21 6 160 110 3.9 2.88 17.0 0 1 4 4 High ## 3 Datsun 7… 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 High ## 4 Hornet 4… 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 High ## 5 Hornet S… 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 Low ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 Low ## 7 Duster 3… 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 Low ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 High ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 High ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 &lt;NA&gt; ## # … with 22 more rows dim(mtcars_NA) ## [1] 32 13 Remove rows where any NA occurs: mtcars_NA %&gt;% na.omit() %&gt;% dim() ## [1] 27 13 Identify columns with NAs and the number of ocurrences: vapply(mtcars_NA, function(x) sum(is.na(x)), double(1)) ## CAR mpg cyl disp hp drat ## 0 1 0 1 1 1 ## wt qsec vs am gear carb ## 0 0 0 0 0 0 ## mileage_class ## 3 Remove columns with more than one missing value: mtcars_NA %&gt;% select(where(function(x) sum(is.na(x)) &lt; 1)) %&gt;% dim() ## [1] 32 8 Replace missing values with zero using tidyr::replace_na: mtcars_NA %&gt;% map_dfc(~ replace_na(.x, 0)) ## # A tibble: 32 x 13 ## CAR mpg cyl disp hp drat wt qsec vs am gear carb mileage_class ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 High ## 2 Mazda RX… 21 6 160 110 3.9 2.88 17.0 0 1 4 4 High ## 3 Datsun 7… 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 High ## 4 Hornet 4… 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 High ## 5 Hornet S… 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 Low ## 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 Low ## 7 Duster 3… 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 Low ## 8 Merc 240D 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 High ## 9 Merc 230 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 High ## 10 Merc 280 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 0 ## # … with 22 more rows Base R: mtcars_NA[is.na(mtcars_NA)] &lt;- 0 2.13 Joining dataframes Mutating joins: df1 &lt;- tibble( name = c(&#39;Brian&#39;, &#39;Connor&#39;, &#39;Jon&#39;), city = c(&#39;Tokyo&#39;, &#39;London&#39;, &#39;Milan&#39;), age = c(28, 25, 21) ) df2 &lt;- tibble( name = c(&#39;Brian&#39;, &#39;Connor&#39;), hair = c(&#39;black&#39;, &#39;brown&#39;), eyes = c(&#39;dark&#39;, &#39;hazel&#39;) ) df1 %&gt;% inner_join(df2, by = &#39;name&#39;) ## # A tibble: 2 x 5 ## name city age hair eyes ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Brian Tokyo 28 black dark ## 2 Connor London 25 brown hazel df1 %&gt;% left_join(df2, by = &#39;name&#39;) ## # A tibble: 3 x 5 ## name city age hair eyes ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Brian Tokyo 28 black dark ## 2 Connor London 25 brown hazel ## 3 Jon Milan 21 &lt;NA&gt; &lt;NA&gt; Base R: merge(df1, df2, by = &#39;name&#39;) merge(df1, df2, by = &#39;name&#39;, all.x = TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
